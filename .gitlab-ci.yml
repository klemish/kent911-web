stages:
- test
- build
- production

test:
  stage: test
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_TAG'
  script:
    - npm install -g @quasar/cli
    - npm install --progress=false
    - quasar build
    # GitLab requires all the static page files to be in /public
    # Because Quasar uses /public for files, they will be deleted after
    # "compilation" and the compiled files will be moved to public.
    - rm -rf public
    - mkdir public
    - cp -r dist/spa/* public

build:
  stage: build
  image: docker:latest
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--max-concurrent-uploads", "5"]
  before_script:
    - until docker info; do sleep 1; done
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create tls-env
    - docker buildx create --use tls-env --buildkitd-flags '--allow-insecure-entitlement network.host' --driver-opt network=host
    - docker buildx build --provenance=false --push --platform linux/amd64,linux/arm64 --network host -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG .
    # - docker push $CI_REGISTRY_IMAGE --all-tags

build_latest:
  stage: build
  image: docker:latest
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--max-concurrent-uploads", "5"]
  before_script:
    - until docker info; do sleep 1; done
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create tls-env
    - docker buildx create --use tls-env --buildkitd-flags '--allow-insecure-entitlement network.host' --driver-opt network=host
    - docker buildx build --provenance=false --push --platform linux/amd64,linux/arm64 --network host -t $CI_APPLICATION_REPOSITORY:latest .
    # - docker push $CI_REGISTRY_IMAGE --all-tags

deploy_kustomize:
  stage: production
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl bash
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
    # - git clone -b $CI_COMMIT_BRANCH https://$CI_DEPLOYER_USER:$CI_DEPLOYER_PASSWORD@gitlab.specter1591.com/$CI_PROJECT_PATH
    - git config --global user.email "gitlab@gitlab.com"
    - git config --global user.name "GitLab CI/CD"
    - git config --list
  script:
    - git checkout $CI_COMMIT_BRANCH
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - cd deployment
    - kustomize edit set image $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
    - cat kustomization.yaml
    - git add .
    - git commit -m '[skip ci] Update Kustomize Deployment'
    - git remote set-url origin https://DEPLOYER_USER:$ACCESS_TOKEN@gitlab.specter1591.com/$CI_PROJECT_PATH
    - git push origin $CI_COMMIT_BRANCH
  when: manual